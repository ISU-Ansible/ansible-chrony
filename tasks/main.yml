---
- name: CHRONY | Include OS-specific variables.
  include_vars: "{{item}}"
  with_first_found:
    - "{{ansible_distribution}}_{{ansible_distribution_major_version}}_{{ansible_distribution_minor_version}}.yml"
    - "{{ansible_distribution}}_{{ansible_distribution_major_version}}.yml"
    - "{{ansible_distribution}}.yml"
    - "{{ansible_os_family}}_{{ansible_distribution_major_version}}_{{ansible_distribution_minor_version}}.yml"
    - "{{ansible_os_family}}_{{ansible_distribution_major_version}}.yml"
    - "{{ansible_os_family}}.yml"
    - default.yml
  tags:
    - chrony

- name: CHRONY | Assert that OS is supported
  assert:
    that: chrony_os_supported == True
  tags:
    - chrony

- name: CHRONY | Set facts for chrony_manage_service and chrony_allow_restart
  set_fact:
    chrony_manage_service: "{{ false if ansible_virtualization_type == 'docker' else true }}"
    chrony_allow_restart: "{{ false if ansible_virtualization_type == 'docker' else true }}"

- name: CHRONY | installation
  package:
    name: "{{ item }}"
    state: installed
  with_items:
    - "{{ chrony_packages }}"
  tags:
    - chrony

- name: CHRONY | Configuration
  template:
    src: "chrony.conf.j2"
    dest: "{{ chrony_configuration_file }}"
    owner: "{{ chrony_config_owner }}"
    group: "{{ chrony_config_group }}"
    mode: "{{ chrony_config_mode }}"
  notify:
    - Restart chrony

- name: CHRONY | Service configuration
  service:
    name: "{{ chrony_service }}"
    state: started
    enabled: true
  when: chrony_manage_service

- name: CHRONY | Register that the chrony role has run
  set_fact: chrony_has_run=true
  when: chrony_has_run is not defined
  tags:
    - chrony
